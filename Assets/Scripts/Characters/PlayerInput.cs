//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Characters/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""InputHandler"",
            ""id"": ""df466efd-84e0-4374-9341-914ca85ffc06"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5131323c-e2c8-408c-9ce1-d059454c17c8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d65f81c4-2b0c-45a2-bd59-0c2703999f26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""1fae7986-8a62-472e-8e26-e062652c7e8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""54a9d236-d99b-4765-980f-344924cdfcd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79f7e5b0-b28c-42fb-befd-9f33af052568"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9012248c-f949-4117-b3d6-3dffece97ace"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d15a8082-e3f3-4262-9b23-986342b98a33"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e22b95a1-3b38-4458-acc3-b5aef2b8d462"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9205d96e-e6e8-46cf-9f58-944dfa08b4ed"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""da7dd76c-dfd9-4fe4-8d54-b89fbbc4206e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cf7f7cde-c9ae-4b0d-9989-9c81f5a0bded"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2486a031-79db-4a72-bdff-570de493ae2e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dd81746-bf72-4800-8d1a-d47c51048c0a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // InputHandler
        m_InputHandler = asset.FindActionMap("InputHandler", throwIfNotFound: true);
        m_InputHandler_Movement = m_InputHandler.FindAction("Movement", throwIfNotFound: true);
        m_InputHandler_Jump = m_InputHandler.FindAction("Jump", throwIfNotFound: true);
        m_InputHandler_Attack = m_InputHandler.FindAction("Attack", throwIfNotFound: true);
        m_InputHandler_Block = m_InputHandler.FindAction("Block", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputHandler
    private readonly InputActionMap m_InputHandler;
    private IInputHandlerActions m_InputHandlerActionsCallbackInterface;
    private readonly InputAction m_InputHandler_Movement;
    private readonly InputAction m_InputHandler_Jump;
    private readonly InputAction m_InputHandler_Attack;
    private readonly InputAction m_InputHandler_Block;
    public struct InputHandlerActions
    {
        private @PlayerInput m_Wrapper;
        public InputHandlerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_InputHandler_Movement;
        public InputAction @Jump => m_Wrapper.m_InputHandler_Jump;
        public InputAction @Attack => m_Wrapper.m_InputHandler_Attack;
        public InputAction @Block => m_Wrapper.m_InputHandler_Block;
        public InputActionMap Get() { return m_Wrapper.m_InputHandler; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputHandlerActions set) { return set.Get(); }
        public void SetCallbacks(IInputHandlerActions instance)
        {
            if (m_Wrapper.m_InputHandlerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnJump;
                @Attack.started -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnAttack;
                @Block.started -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_InputHandlerActionsCallbackInterface.OnBlock;
            }
            m_Wrapper.m_InputHandlerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
            }
        }
    }
    public InputHandlerActions @InputHandler => new InputHandlerActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IInputHandlerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
    }
}
